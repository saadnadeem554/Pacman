INCLUDE Irvine32.inc
includelib Winmm.lib

PlaySound PROTO,
        pszSound:PTR BYTE, 
        hmod:DWORD, 
        fdwSound:DWORD


.data
ghostcounter db 5	
level db 0
levelString db 2 DUP(?)
playerscore db 140 dup ("!")
playernames db 140 dup ("!")
playerlevels db 140 dup ("!")
fileName1 db "scores.txt", 0
fileName2 db "names.txt", 0
fileName3 db "levels.txt", 0
numlevels db 0
numnames db 0
numscores db 0
fileHandle dd ?
arrScore db 4 dup(0)

; screens ;
; map of 80x25 grid ;

theMap dd 0


theMap1 db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
	    db "2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  77777777777777777777777777777777777772",0
	    db "2.77777777777 7777777 7777777777 77777777777777 777777777.7777777777 777777777777.7                                    2",0
	    db "2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .7                                    2",0
	    db "2             xxxxxxx.77777777777xxxxxxxxxxxxxx 777777777.                       .7       LIVES:                       2",0
	    db "2             777777x.7          x            x. . . . . .                       .7                                    2",0
	    db "2. . . . . . . . . .x.7          x            x.777777777  . . . . . . . . . . . .7       LEVEL: I                     2",0
	    db "277777777           x.7          x            x.777777777.77777777777777777777777.77777777777777777777777777777777777772",0
	    db "2       7           x.7          x            x.777777777.7                     7.77777777777777777777777777777777777772",0
	    db "2       7           x.7          x            x.         .7                     7.777777777                     77777772",0
	    db "277777777           x.7          x            x.777777777 7                     7.777777777                     77777772",0
	    db "2 . . . . . . . . . x.7          x            x.7       7.7                     7.777777777      your score:    77777772",0
	    db "2 77777777777.xxxxxxxxxxxx       x            x.7       7.7                     7.777777777                     77777772",0
	    db "2 77777777777.xxxxxxxxxxxx7777777xxxxxxxxxxxxxx.777777777.7                     7.777777777                     77777772",0
	    db "2. . . . . . . . . . . . . . . . . . . . . . . . . . . . .7                     7.777777777                     77777772",0
	    db "2                          77777.77777777777777.7       7.7                     7.777777777                     77777772",0
	    db "2                          77777.7            7.7       7.7                     7.777777777                     77777772",0
	    db "2. . . . . . . . . . . . . . .  .7            7.777777777.7                     7.777777777                     77777772",0
	    db "2777777                    77777.7            7.7       7.7                     7.77777777777777777777777777777777777772",0
	    db "2     7                    77777.77777777777777.777777777.7                     7.777777777  This maze is       77777772",0
	    db "2     7               . . . . . . . . . . . .  . . . . . .7                     7.777777777  simple  just       77777772",0
	    db "2     7             77777777777777777777777              .7                     7.777777777  navigate your way  77777772",0
	    db "2777777             7                     7              .77777777777777777777777.777777777  and collect the    77777772",0
	    db "2 . . . . . . . . . 7                     7              .7  . . . . . . . . . . .777777777  points             77777772",0
	    db "2 .                 77777777777777777777777              .                       .77777777777777777777777777777777777772",0
	    db "2   . . . . . .  . . . . . . . . . . . . .   . . . . . . . . . . . . . . . . . .  77777777777777777777777777777777777772",0
	    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0



theMap2 db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
	    db "2  . . . . . . . . . . . . . . . . . . . . . . . . . . * . . . . . . . . . . . .  77777777777777777777777777777777777772",0
	    db "2.77777777777 777777777777777777777777777777777777777777777777777777 777777777777.7                                    2",0
	    db "2. . . . . . . . ? . . . . . . . . . . . . . . . . . . . . . . . . . . . ? . . . .7                                    2",0
	    db "2 7777777777777777777777777777777777777777777777777777777. 7777777777777777777777.7       LIVES:                       2",0
	    db "2 7777777777777777777                         7. . * . . . 7777777777777777777777.7                                    2",0
	    db "2. . . . . . . . . .7                         7.777777777  . . . . . * . . . . . .7       LEVEL: II                    2",0
	    db "277777777777777777777                         7.7       7.77777777777777777777777.77777777777777777777777777777777777772",0
	    db "2                   7                         7.777777777.7                     7.77777777777777777777777777777777777772",0
	    db "2                   7                         7.         .7                     7.777777777                     77777772",0
	    db "277777777777777777777                         7.777777777 7                     7.777777777                     77777772",0
	    db "2 . . . . . * . . . 7                         7.7       7.7                     7.777777777      your score:    77777772",0
	    db "2 7777777777777777777                         7.7       7.7                     7.777777777                     77777772",0
	    db "2 777777777777777777777777777777777777777777777.777777777.7                     7.777777777                     77777772",0
	    db "2. . . . . . . . ? . . . * . . . . . . . . . . . . . . . .7                     7.777777777                     77777772",0
	    db "2 777777777777777777777777777777.77777777777777.7       7.7                     7.777777777                     77777772",0
	    db "2 777777777777777777777777777777.7            7.7       7.7                     7.777777777                     77777772",0
	    db "2. . . . * . . . . . . . . . .  .7            77777777777.7                     7.777777777                     77777772",0
	    db "2777777777777777777 777777777777.7                      7.7                     7.77777777777777777777777777777777777772",0
	    db "2                 7 777777777777.777777777777777777777777.7                     7.777777777 This is a tricky one 7777772",0
	    db "2                 7 . . . . . . . . . * . . . .. . . . . .7                     7.777777777 Less paths are       7777772",0
	    db "2                 7 7777777777777777777777777777777777777.7                     7.777777777 available for you    7777772",0
	    db "2777777777777777777 7                                   7.77777777777777777777777.777777777 to move  Think you   7777772",0
	    db "2 * . . . . . . . . 7                                   7. . . . . . * . . . . . *777777777 can do it?           7777772",0
	    db "2 .7777777777777777 7777777777777777777777777777777777777777777777777777777777777.77777777777777777777777777777777777772",0
	    db "2   . . . . * .  . . . . . . . . . . . . . * . . . . . . . . . . . . . . . . . .  77777777777777777777777777777777777772",0
	    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0


theMap3 db "1111111111111111111111111111111111111&1111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
	    db "2  . . . . . . . . . . . . . . . . . * . . . . . . .7. . . . . . . . . . . . . .  77777777777777777777777777777777777772",0
	    db "2.77777777777 777777777777777777777777777770777777777777777777777777 777777777777.7                                    2",0
	    db "2. . . 7 . . . . . . . . . . . . . . . . . . . . ~ . . . . . . . . . . . .7* . . .7                                    2",0
	    db "2*7777777777777777777777777777777777777777777777777777777.77777777777777777777777.7       LIVES:                       2",0
	    db "2 7777777777777777777                         7. . . . . *77777777777777777777777.7                                    2",0
	    db "2~ . . . . * . . . ?7                         7.777777777  . . . . . . .7. . . . ~7       LEVEL: III                   2",0
	    db "277777777777777777777                         7*7       7.77777777777777777777777.77777777777777777777777777777777777772",0
	    db "2                   7                         7.777777777.7                     7.77777777777777777777777777777777777772",0
	    db "2                   7                         7.     7   .7                     7.777777777                     77777772",0
	    db "277777777777777777777                         7*777707777 7                     7.777777777                     77777772",0
	    db "2 . . . . . . . . .?7                         7.7       7.7                     7.777777777      your score:    77777772",0
	    db "2*7777777707777777777                         7.7       7*7                     7.777777777                     77777772",0
	    db "2 777777770777777777777777777777777777777777777.777707777.7                     7.777777777                     77777772",0
	    db "&. . . . . . . .   . . . . . . . . . . 7 ~ . . . . . . . .&                     7.777777777                     77777772",0
	    db "2 777777777777777777777777777777.77777777777777.7       7.7                     7.777777777                     77777772",0
	    db "2 777777777777777777777777777777.7            7.7       7.7                     7.777777777                     77777772",0
	    db "2* . . . . . . . . . . . 7 . .  .7            77777777777.7                     7.777777777                     77777772",0
	    db "2777777777777777777 777777777777.7                      7.7                     7.77777777777777777777777777777777777772",0
	    db "2                 7 7777777777777777777777777777777777777.7                     7.777777777 This is the last straw! 7772",0
	    db "2                 7 . . * . . . . . . . . . . .~ . . . . .7                     7.777777777 The maze has dead ends! 7772",0
	    db "2                 7 7777777777777777077777777777777777777.7                     7.777777777 collect all points      7772",0
	    db "2777777777777777777 7                                   7.77777777777777777777777.777777777 without losing your     7772",0
	    db "2 . . . . . . . . . 7                                   7? . . . . . . . . . . . *777777777 lives and you'll be     7772",0
	    db "2 .7777777777777777 7777777777777777077777777777777777777777777777777777777777777.777777777 THE PACMAN CHAMPION!!   7772",0
	    db "2   . . . . . .  . . . . . . . . . . . . . . .7* . . . . . . . . . . . . . . . .  77777777777777777777777777777777777772",0
	    db "1111111111111111111111111111111111111&1111111111111111111111111111111111111111111111111111111111111111111111111111111111",0


		
GameOverMessage	db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                           _____ ___    __  ___ ____     ____  _   __ ____ ___   __                                     ",0
                db "                          / ___// _ |  /  |/  // __/    / __ \| | / // __// _ \ / /                                     ",0
                db "                         / (_ // __ | / /|_/ // _/     / /_/ /| |/ // _/ / , _//_/                                      ",0
                db "                         \___//_/ |_|/_/  /_//___/     \____/ |___//___//_/|_|(_)                                       ",0
                db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                      GAME OVER                                                                         ",0
				db "                                                                                                                        ",0
				db "                                      YOU LOST                                                                          ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "                                                                                                                        ",0
				db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
				db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
				db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0

PauseScreenMessage  db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                             _____ ___    __  ___ ____       ___   ___   __  __ ____ ____ ___                           ",0
                    db "                            / ___// _ |  /  |/  // __/      / _ \ / _ | / / / // __// __// _ \                          ",0
                    db "                           / (_ // __ | / /|_/ // _/       / ___// __ |/ /_/ /_\ \ / _/ / // /                          ",0
                    db "                           \___//_/ |_|/_/  /_//___/      /_/   /_/ |_|\____//___//___//____/                           ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                       GAME PAUSED                                                                      ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                  Press any key to resume                                                               ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0

LevelPassedMessage  db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                         __    ____ _   __ ____ __       ___   ___    ____ ____ ____ ___   __                           ",0
                    db "                        / /   / __/| | / // __// /      / _ \ / _ |  / __// __// __// _ \ / /                           ",0
                    db "                       / /__ / _/  | |/ // _/ / /__    / ___// __ | _\ \ _\ \ / _/ / // //_/                            ",0
                    db "                      /____//___/  |___//___//____/   /_/   /_/ |_|/___//___//___//____/(_)                             ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                       LEVEL PASSED                                                                     ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                       Press any key to proceed                                                         ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0

gamewonMessage      db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                 _____ ____   _  __ _____ ___   ___  ______ __  __ __    ___  ______ ____ ____   _  __ ____             ",0
                    db "                / ___// __ \ / |/ // ___// _ \ / _ |/_  __// / / // /   / _ |/_  __//  _// __ \ / |/ // __/             ",0
                    db "               / /__ / /_/ //    // (_ // , _// __ | / /  / /_/ // /__ / __ | / /  _/ / / /_/ //    /_\ \               ",0
                    db "               \___/ \____//_/|_/ \___//_/|_|/_/ |_|/_/   \____//____//_/ |_|/_/  /___/ \____//_/|_//___/               ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                             YOU WON!                                                                   ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0

ScoreHistory        db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db " press b to go back                 PLAYER HISTORY                                                                      ",0
                    db "         NAME                SCORES           LEVEL                                                                     ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0


WelcomeMessage      db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                              _       __ ______ __    ______ ____   __  ___ ______                                      ",0
                    db "                             | |     / // ____// /   / ____// __ \ /  |/  // ____/                                      ",0
                    db "                             | | /| / // __/  / /   / /    / / / // /|_/ // __/                                         ",0
                    db "                             | |/ |/ // /___ / /___/ /___ / /_/ // /  / // /___                                         ",0
                    db "                             |__/|__//_____//_____/\____/ \____//_/  /_//_____/                                         ",0 
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                       PLEASE ENTER YOUR NAME:                                                                          ",0
                    

MAX = 80                     
username db MAX+1 DUP (?)  
lenusername dd 0

MenuMessage         db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db " /\\\\\\\\\\\\\______/\\\\\\\\\___________/\\\\\\\\\___/\\\\____________/\\\\_____/\\\\\\\\\_____/\\\\\_____/\\\        ",0
                    db " \/\\\/////////\\\__/\\\\\\\\\\\\\______/\\\////////___\/\\\\\\________/\\\\\\___/\\\\\\\\\\\\\__\/\\\\\\___\/\\\       ",0
                    db "  \/\\\_______\/\\\_/\\\/////////\\\___/\\\/____________\/\\\//\\\____/\\\//\\\__/\\\/////////\\\_\/\\\/\\\__\/\\\      ",0
                    db "   \/\\\\\\\\\\\\\/_\/\\\_______\/\\\__/\\\______________\/\\\\///\\\/\\\/_\/\\\_\/\\\_______\/\\\_\/\\\//\\\_\/\\\     ",0
                    db "    \/\\\/////////___\/\\\\\\\\\\\\\\\_\/\\\______________\/\\\__\///\\\/___\/\\\_\/\\\\\\\\\\\\\\\_\/\\\\//\\\\/\\\    ",0
                    db "     \/\\\____________\/\\\/////////\\\_\//\\\_____________\/\\\____\///_____\/\\\_\/\\\/////////\\\_\/\\\_\//\\\/\\\   ",0
                    db "      \/\\\____________\/\\\_______\/\\\__\///\\\___________\/\\\_____________\/\\\_\/\\\_______\/\\\_\/\\\__\//\\\\\\  ",0
                    db "       \/\\\____________\/\\\_______\/\\\____\////\\\\\\\\\__\/\\\_____________\/\\\_\/\\\_______\/\\\_\/\\\___\//\\\\\ ",0
                    db "        \///_____________\///________\///________\/////////___\///______________\///__\///________\///__\///_____\///// ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "      _ PRESS i FOR INSTRUCTIONS                                                                                        ",0
                    db "      _ PRESS p TO PLAY                                                                                                 ",0
                    db "      _ PRESS e TO EXIT GAME                                                                                            ",0
                    db "      - PRESS h FOR SCORES                                                                                              ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0


InstMessage         db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "                                                                                                                        ",0
                    db "  PRESS b TO GO BACK TO MENU                                                                                            ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "               ____  ____    _____ ______  ____   __ __     __  ______  ____  ___   ____    _____                       ",0
                    db "              |    ||    \  / ___/|      ||    \ |  |  |   /  ]|      ||    |/   \ |    \  / ___/                       ",0
                    db "               |  | |  _  |(   \_ |      ||  D  )|  |  |  /  / |      | |  ||     ||  _  |(   \_                        ",0
                    db "               |  | |  |  | \__  ||_|  |_||    / |  |  | /  /  |_|  |_| |  ||  O  ||  |  | \__  |                       ",0
                    db "               |  | |  |  | /  \ |  |  |  |    \ |  :  |/   \_   |  |   |  ||     ||  |  | /  \ |                       ",0
                    db "               |  | |  |  | \    |  |  |  |  .  \|     |\     |  |  |   |  ||     ||  |  | \    |                       ",0
                    db "              |____||__|__|  \___|  |__|  |__|\_| \__,_| \____|  |__|  |____|\___/ |__|__|  \___|                       ",0
                    db "                                                                                                                        ",0
                    db "  USE W, A, S, D KEYS TO GUIDE THE PACMAN THROUGH A SERIES OF MAZES SPANNED OVER THREE LEVELS                           ",0
                    db "  YOU WILL ENDURE LOSS OF A LIFE IF YOU COLLIDE WITH THE GHOST WHICH WILL MOVE RANDOMLY THROUGH THE MAZE (BE CAREFUL!)  ",0
                    db "  COLLECT ALL THE POINTS REPRESENTED BY . SCATTERED THROUGHOUGHT THE MAZE TO PROCEED TO THE NEXT LEVEL                  ",0
                    db "                                                                                                                        ",0
                    db " TIPS:-                                                                                                                 ",0
                    db "        POINTS REPRESENTED BY * ARE WORTH DOUBLE. MAKE SURE TO COLLECT THEM!                                            ",0
                    db "        & represent a teleportation path. use it to escape the ghosts                                                   ",0
                    db "        0 represent a hidden path through the walls (shhh don't tell the ghosts about it)                               ",0
                    db "        You have only three lives dont loose them, luckily ~ increases your life. Be wise and collect this powerup      ",0
                    db "        Tired of these nosy ghosts, collect ? powerup to attain a special ability to eat them! with a bonus of 4 pts    ",0
                    db "          (This ability only lasts for twenty seconds. Make em count!)                                                  ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "                                                                                                                        ",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0
                    db "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",0

ppmsg db "Powerup activated:",0
ppdemsg  db "                  ",0
mapSize dd 3267
mazewidth db 121

lvlpts dd -1
changelvl db 0

score dd 0

xPos BYTE 0
yPos byte 0

lives db 0

inputChar BYTE 0
movement BYTE 0

xg1Pos db 0
yg1Pos db 0
g1move db 0

xg2Pos db 0
yg2Pos db 0
g2move db 0

xg3Pos db 0
yg3Pos db 0
g3move db 0

xg4Pos db 0
yg4Pos db 0
g4move db 0

xg5Pos db 0
yg5Pos db 0
g5move db 0


powerup db 0

clock dw 0

beginSound db "pacman_beginning.wav", 0
DeathSound db "pacman_death.wav", 0
DotSound db "waka.wav", 0
PPSound db "cherry.wav", 0
StartSound db "Start.wav", 0
prompt db "Press any key to start!",0
promptremove db "                       ",0

.code






;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;collision with walls;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
isColliding PROC uses esi edx eax ecx
mov ecx, esi
	mov esi, theMap
	mov edx, LENGTHOF theMap1
	mul edx
	add eax, ebx
	add esi, eax
	mov al, [esi]
    cmp al, "."
	je move
	cmp ecx,1
	jne cont
	cmp al, "0"
	je move
	cmp al, "&"
	je move
cont:
	cmp al, "*"
	je move
	cmp al, "~"
	je move
	cmp al, "?"
	je move
	cmp al, " "
	je move
	mov ebx, 1     ; means move not possible
	jmp endd
move:
	mov ebx, 0	   ; move possible
endd:	
ret
isColliding ENDP

CheckCollisionWallsdown PROC uses eax ecx 
	push ebp
	mov ebp,esp
	mov ebx,[ebp+16]
	mov eax,[ebp+20]
	pop ebp
	call isColliding
	cmp ebx, 1
	jne return
return:
ret
CheckCollisionWallsdown ENDP

CheckCollisionWallsup PROC uses eax ecx 
	push ebp
	mov ebp,esp
	mov ebx,[ebp+16]
	mov eax,[ebp+20]
	pop ebp

	dec eax
	dec eax
	call isColliding
	cmp ebx, 1
	jne return
return:
ret
CheckCollisionWallsup ENDP

CheckCollisionWallsright PROC uses eax ecx 
	push ebp
	mov ebp,esp
	mov ebx,[ebp+16]
	mov eax,[ebp+20]
	pop ebp

	inc ebx
	dec eax
	call isColliding
	cmp ebx, 1
	jne return
return:
ret
CheckCollisionWallsright ENDP

CheckCollisionWallsleft PROC uses eax ecx 
	push ebp
	mov ebp,esp
	mov ebx,[ebp+16]
	mov eax,[ebp+20]
	pop ebp

	dec ebx
	dec eax
	call isColliding
	cmp ebx, 1
	jne return
return:
ret
CheckCollisionWallsleft ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;drawing map;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DrawMap PROC uses eax 
	mov lvlpts, 0
	mov dl,0
	mov dh,1
	call gotoxy

DRAWMAPLOOP:
	mov eax, blue           ; map color
	call SetTextColor
	mov eax, 0
	mov al, [esi]

	call DrawWhatidrawn
	inc esi
	loop DRAWMAPLOOP

		ret
DrawMap endp

DrawWhatidrawn PROC
	cmp al, "7"
	je PRINTWALL
	cmp al, " "
	je PRINTSPACE
	cmp al, "1"
	je BOUNDARY
	cmp al, "*"
	je scorepp
	cmp al, "~"
	je lifepp
	cmp al, "?"
	je powerpp
	cmp al, "0"
	je shortcut
	cmp al, "2"
	je BOUNDARY2
	cmp al,"."
	jne print
	inc lvlpts

print:
	push eax			  ; save register
	mov eax, white
	call SetTextColor
	pop eax
	call writechar
	jmp KEEPDRAWING


PRINTWALL:
	call PrintWall7
	jmp KEEPDRAWING
scorepp:
	call Printscorepp
	jmp KEEPDRAWING
lifepp:
	call Printlifepp
	jmp KEEPDRAWING
powerpp:
	call PrintPowerpp
	jmp KEEPDRAWING
shortcut:
	call Printshortcut
	jmp KEEPDRAWING
PRINTSPACE:
	mov eax, " "
	call WriteChar
	jmp KEEPDRAWING
BOUNDARY :
	call PrintBoundary
	jmp KEEPDRAWING
BOUNDARY2 :
	call PrintBoundary2
	jmp KEEPDRAWING
	

KEEPDRAWING :
ret
DrawWhatidrawn ENDP


PrintWall7 PROC
	mov eax, "1"
	call WriteChar
ret
PrintWall7 ENDP

Printshortcut PROC
	mov eax, lightgray
	call SetTextColor	
	mov eax,"0"
	call writechar
ret
Printshortcut ENDP

Printscorepp PROC
	push eax			
	mov eax, yellow
	call SetTextColor	
	mov eax,"*"
	call writechar
	pop eax
ret
Printscorepp ENDP

Printlifepp PROC		
	mov eax, lightred
	call SetTextColor	
	mov eax,"~"
	call writechar
ret
Printlifepp ENDP

PrintPowerpp PROC		
	mov eax, LIGHTGREEN
	call SetTextColor	
	mov eax,"?"
	call writechar
ret
PrintPowerpp ENDP

PrintBoundary PROC
	mov eax, "-"
	call WriteChar	
ret
PrintBoundary ENDP

PrintBoundary2 PROC
	mov eax, "|"
	call WriteChar
ret
PrintBoundary2 ENDP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;get key pressed;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
getmovement PROC uses eax ebx
	; Set movement based on the key pressed
	cmp inputChar,"p"
	jne c1
	call DisplayPauseMap
	jmp done

c1:
    cmp inputChar, "w"
    je setW
    cmp inputChar, "a"
    je setaA
    cmp inputChar, "s"
    je setsS
    cmp inputChar, "d"
    je setD
    jmp noChange

setW:
	movzx eax,yPos
	push eax
	movzx eax,xPos
	push eax
	mov esi, 1
	call CheckCollisionWallsup 
	pop eax
	pop eax
	cmp ebx,1
	je done
    mov movement, "w"
    jmp done

setaA:
	movzx eax,yPos
	push eax
	movzx eax,xPos
	push eax
	mov esi, 1
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je done
    mov movement, "a"
    jmp done

setsS:
	movzx eax,yPos
	push eax
	movzx eax,xPos
	push eax
	mov esi, 1
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je done
    mov movement, "s"
    jmp done

setD:
	movzx eax,yPos
	push eax
	movzx eax,xPos
	push eax
	mov esi, 1
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je done
	mov movement, "d"
    jmp done

noChange:    
done:
    ret
getmovement ENDP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;action against the key;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
inputaction PROC uses eax ebx
		cmp movement,"w"
		je moveUp

		cmp movement,"s"
		je moveDown

		cmp movement,"a"
		je moveLeft

		cmp movement,"d"
		je moveRight
		jmp nochange


	moveUp:
		movzx eax,yPos
		push eax
		movzx eax,xPos
		push eax
		mov esi, 1
		call CheckCollisionWallsup
		pop eax
		pop eax

		mov al,yPos
		mov ah,xPos
		cmp al,1
		jne nnnnormal
		cmp ah,37
		jne nnnnormal
		call UpdatePlayer
		mov yPos,27
		call DrawPlayer
		jmp nochange

	nnnnormal:
		cmp ebx,1
		je nochange
		call UpdatePlayer
		dec yPos
		call DrawPlayer
		jmp nochange

		
	moveDown:
		movzx eax,yPos
		push eax
		movzx eax,xPos
		push eax
		mov esi, 1
		call CheckCollisionWallsdown
		pop eax
		pop eax

		mov al,yPos
		mov ah,xPos
		cmp al,27
		jne nnnormal
		cmp ah,37
		jne nnnormal
		call UpdatePlayer
		mov yPos,1
		call DrawPlayer
		jmp nochange
	
	nnnormal:
		cmp ebx,1
		je nochange
		call UpdatePlayer
		inc yPos
		call DrawPlayer
		jmp nochange



	moveLeft:
		movzx eax,yPos
		push eax
		movzx eax,xPos
		push eax
		mov esi, 1
		call CheckCollisionWallsleft
		pop eax
		pop eax
		
		mov al,yPos
		mov ah,xPos
		cmp al,15
		jne normal
		cmp ah,0
		jne normal
		call UpdatePlayer
		mov xPos,58
		call DrawPlayer
		jmp nochange
	
	normal:	
		cmp ebx,1
		je nochange
		call UpdatePlayer
		dec xPos
		call DrawPlayer
		jmp nochange

	moveRight:
		movzx eax,yPos
		push eax
		movzx eax,xPos
		push eax
		mov esi, 1
		call CheckCollisionWallsright
		pop eax
		pop eax
		
		mov al,yPos
		mov ah,xPos
		cmp al,15
		jne nnormal
		cmp ah,58
		jne nnormal
		call UpdatePlayer
		mov xPos,0
		call DrawPlayer
		jmp nochange
	
	nnormal:	
		cmp ebx,1
		je nochange
		call UpdatePlayer
		inc xPos
		call DrawPlayer
		jmp nochange

nochange:
mov eax, 100
call delay
ret
inputaction ENDP


PrintLives PROC uses dx eax
	mov dl, 97
    mov dh, 5
    call Gotoxy
	mov eax, white
	call SetTextColor

	mov eax, 0
	mov al,lives
    call WriteInt
ret
PrintLives ENDP

											; display screens ;
DisplayPauseMap PROC 
	mov esi, offset PauseScreenMessage
	mov ecx, mapSize
	call DrawMap
	call ReadChar
	mov esi,  theMap
	mov ecx, mapSize
    call DrawMap
ret
DisplayPauseMap ENDP

DisplayGameWon PROC 
	mov esi, offset GameWonMessage
	mov ecx, mapSize
	call DrawMap
	mov dl,30
	mov dh,16
	call gotoxy
	mov edx, offset username
	mov ecx, lenusername
	call writestring
	mov dl,30
	mov dh,17
	call gotoxy
	mov eax,score
	call writeint
	call ReadChar
ret
DisplayGameWon ENDP

DisplayInstruction PROC 
	mov esi, offset InstMessage
	mov ecx, mapSize
	call DrawMap
	call ReadChar
ret
DisplayInstruction ENDP
DisplayHscore Proc
call clrscr
	mov esi,offset ScoreHistory
	mov ecx, mapSize
	call DrawMap
	
	call readdatafile
	call printHighscores
	call ReadChar
ret
DisplayHscore ENDP
DisplayMenu PROC 
	mov esi, offset MenuMessage
	mov ecx, mapSize
	call DrawMap
	call ReadChar
ret
DisplayMenu ENDP

DisplayWelcome PROC 
	mov esi, offset WelcomeMessage
	mov ecx, 2106
	call DrawMap
	mov  edx, OFFSET username
    mov  ecx, MAX            
    call ReadString
ret
DisplayWelcome ENDP


											; check if level passed ;

checklvlpass PROC
	cmp lvlpts,0
	jne nochng
	call clrscr
	mov esi, offset LevelPassedMessage
	mov ecx, mapSize
	call DrawMap
	call ReadChar
	mov changelvl, 1
nochng:
ret
checklvlpass ENDP



	

	

	

	

resetghost PROC
	mov edx, [esp+4]

	cmp edx,1
	jne c2
	mov xg1Pos, 1
	mov yg1Pos, 2
	jmp en
c2:
	cmp edx,2
	jne c3
	mov xg2Pos, 80
	mov yg2Pos, 2
	jmp en
c3:
	cmp edx,3
	jne c4
	mov xg3Pos,  1
	mov yg3Pos, 25
	jmp en
c4:
	cmp edx,4
	jne c5
	mov xg4Pos, 80
	mov yg4Pos, 25
	jmp en
c5:
	cmp edx,5
	jne en
	mov xg5Pos, 40
	mov yg5Pos, 21
en:
ret
resetghost ENDP

											; collision with ghost ;

checkCollisionwithghost PROC uses eax ebx edx
	mov ax,0
	mov bx,0

	mov al, xPos
	mov ah, yPos

	mov bl, xg1pos
	mov bh, yg1pos
	mov edx, 1
	cmp ax,bx
	je collide

	mov bl, xg2pos
	mov bh, yg2pos
	mov edx, 2
	cmp ax,bx
	je collide

	mov bl, xg3pos
	mov bh, yg3pos
	mov edx, 3
	cmp ax,bx
	je collide

	mov bl, xg4pos
	mov bh, yg4pos
	mov edx, 4
	cmp ax,bx
	je collide

	mov bl, xg5pos
	mov bh, yg5pos
	mov edx, 5
	cmp ax,bx
	je collide
	jmp nochang

collide:
	cmp powerup,1
	jne cont
	push edx
	call resetghost
	pop edx
	add score, 4
	jmp nochang
	cont:
	INVOKE PlaySound, OFFSET DeathSound, NULL, 0
	dec lives
	mov ecx,1
nochang:
ret
checkCollisionwithghost ENDP



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
;							levels 1, 2 & 3     					           ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


Level1 PROC 
	mov eax, OFFSET theMap1
	mov theMap,eax
resetgame:
    mov changelvl, 0
	mov xPos, 52
	mov yPos, 17

	mov xg1Pos, 1
	mov yg1Pos, 2
	mov g1move, 0

	mov xg2Pos, -1
	mov yg2Pos, -1
	mov g2move, 0

	mov xg3Pos,  1
	mov yg3Pos, 25
	mov g3move, 0

	mov xg4Pos, -1
	mov yg4Pos, -1
	mov g4move, 0

	mov xg5Pos, -1
	mov yg5Pos, -1
	mov g4move, 0

	mov powerup, 0



	call clrscr
	mov ecx, mapSize
	mov esi, theMap
	call DrawMap
	call DrawPlayer
	call Drawghost1
	call Drawghost3
	call PrintLives


	; write score and initially ;

	mov dl, 102
    mov dh, 16
    call Gotoxy
	mov eax, lightCyan
	call SetTextColor
	mov eax,score
    call WriteInt


	INVOKE PlaySound, OFFSET beginSound, NULL, 1h

	mov dl, 50
	mov dh, 28
	call gotoxy
	mov edx, offset prompt
	mov ecx, lengthof prompt
	call writestring
	


	call readchar		;this key press starts the game
	mov inputchar,al

	mov dl, 50
	mov dh, 28
	call gotoxy
	mov edx, offset promptremove
	mov ecx, lengthof promptremove
	call writestring


	call getmovement


	gameLoop:
		call PrintLives

		mov ecx,0
		call checkCollisionwithghost
		cmp lives,0
		je ex
		cmp ecx,1
		je resetgame

		call UpdateScore
		
		; get user key input:
		mov al, 0 
		call Readkey
		jz noinput
		mov inputChar,al
		call getmovement
		
noinput:
		call inputaction

		mov ecx,0
		call checkCollisionwithghost
		cmp lives,0
		je ex
		cmp ecx,1
		je resetgame

		call MoveGhost1
		call MoveGhost3

		call checklvlpass
		cmp changelvl,0
		jne ex
		
	jmp gameLoop

ex:

ret
Level1 ENDP



Level2 PROC 
	mov eax, OFFSET theMap2
	mov theMap,eax
resetgame:
    mov changelvl, 0
	mov xPos, 52
	mov yPos, 17

	mov xg1Pos, 1
	mov yg1Pos, 2
	mov g1move, 0

	mov xg2Pos, 80
	mov yg2Pos, 2
	mov g2move, 0

	mov xg3Pos,  1
	mov yg3Pos, 25
	mov g3move, 0

	mov xg5Pos, -1
	mov yg5Pos, -1
	mov g4move, 0

	mov xg4Pos, -1
	mov yg4Pos, -1
	mov g4move, 0

	mov powerup, 0



	call clrscr
	mov ecx, mapSize
	mov esi, theMap
	call DrawMap
	call DrawPlayer
	call Drawghost1
	call Drawghost2
	call Drawghost3
	call PrintLives


	; write score and initially ;

	mov dl, 102
    mov dh, 16
    call Gotoxy
	mov eax, lightCyan
	call SetTextColor
	mov eax,score
    call WriteInt

	INVOKE PlaySound, OFFSET beginSound, NULL, 1h

	mov dl, 50
	mov dh, 28
	call gotoxy
	mov edx, offset prompt
	mov ecx, lengthof prompt
	call writestring
	


	call readchar		;this key press starts the game
	mov inputchar,al

	mov dl, 50
	mov dh, 28
	call gotoxy
	mov edx, offset promptremove
	mov ecx, lengthof promptremove
	call writestring


	call getmovement


	gameLoop:
		call PrintLives
		mov ecx,0
		call checkCollisionwithghost
		cmp lives,0
		je ex
		cmp ecx,1
		je resetgame


		call UpdateScore
		
		; get user key input:
		mov al, 0 
		call Readkey
		jz noinput
		mov inputChar,al
		call getmovement
		
	noinput:
		call inputaction

		mov ecx,0
		call checkCollisionwithghost
		cmp lives,0
		je ex
		cmp ecx,1
		je resetgame

		call MoveGhost1
		call MoveGhost2
		call MoveGhost3
		call activatepowerup

		call checklvlpass
		cmp changelvl,0
		jne ex
		inc clock
	jmp gameLoop

ex:

ret
Level2 ENDP


Level3 PROC 
	mov eax, OFFSET theMap3
	mov theMap,eax

resetgame:
    mov changelvl, 0
	mov xPos, 52
	mov yPos, 17

	mov xg1Pos, 1
	mov yg1Pos, 2
	mov g1move, 0

	mov xg2Pos, 80
	mov yg2Pos, 2
	mov g2move, 0

	mov xg3Pos,  1
	mov yg3Pos, 25
	mov g3move, 0

	mov xg4Pos, 80
	mov yg4Pos, 25
	mov g4move, 0

	mov xg5Pos, 40
	mov yg5Pos, 21
	mov g5move, 0

	mov powerup, 0



	call clrscr
	mov ecx, mapSize
	mov esi, theMap
	call DrawMap
	call DrawPlayer
	call Drawghost1
	call Drawghost2
	call Drawghost3
	call Drawghost4
	call Drawghost5
	call PrintLives


	; write score and initially ;

	mov dl, 102
    mov dh, 16
    call Gotoxy
	mov eax, lightCyan
	call SetTextColor
	mov eax,score
    call WriteInt

	INVOKE PlaySound, OFFSET beginSound, NULL, 1h

	mov dl, 50
	mov dh, 28
	call gotoxy
	mov edx, offset prompt
	mov ecx, lengthof prompt
	call writestring
	


	call readchar		;this key press starts the game
	mov inputchar,al

	mov dl, 50
	mov dh, 28
	call gotoxy
	mov edx, offset promptremove
	mov ecx, lengthof promptremove
	call writestring

	call getmovement


	gameLoop:
	mov ecx,0
		call checkCollisionwithghost
		cmp lives,0
		je ex
		cmp ecx,1
		je resetgame

		call MoveGhost1
		call MoveGhost2
		call MoveGhost3
		call MoveGhost4
		call MoveGhost5

		call activatepowerup

		call PrintLives

		mov ecx,0
		call checkCollisionwithghost
		cmp lives,0
		je ex
		cmp ecx,1
		je resetgame

		call UpdateScore
		
		; get user key input:
		mov al, 0 
		call Readkey
		jz noinput
		mov inputChar,al
		call getmovement
		
	noinput:
		call inputaction

		mov ecx,0
		call checkCollisionwithghost
		cmp lives,0
		je ex
		cmp ecx,1
		je resetgame

		call MoveGhost1
		call MoveGhost2
		call MoveGhost3
		call MoveGhost4
		call MoveGhost5


		call checklvlpass
		cmp changelvl,0
		jne ex
		
		inc clock
	jmp gameLoop

ex:

ret
Level3 ENDP

activatepowerup PROC
	cmp powerup,1
	jne en

	mov dl,12
	mov dh, 28
	call gotoxy
	mov edx, offset ppmsg
	call writestring


	mov dl,40
	mov dh, 28
	call gotoxy
	mov eax, 0
	mov ax,clock 
	mov bl,10
	div bl
	mov bl,al
	mov eax,0
	mov al,bl
    call WriteInt

	cmp clock,200
	jne en
	mov powerup,0

	mov dl,40
	mov dh, 28
	call gotoxy
	mov al," "

	call Writechar
	mov dl,41
	mov dh, 28
	call gotoxy
	mov al," "

	call Writechar
	mov dl,42
	mov dh, 28
	call gotoxy
	mov al," "
	call Writechar

	mov dl,12
	mov dh, 28
	call gotoxy
	mov edx, offset ppdemsg
	call writestring

en:
ret
activatepowerup ENDP





					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
					;							main function							           ;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

main PROC
INVOKE PlaySound, OFFSET StartSound, NULL, 1h
; displaying menu and screens ; 
	
	call DisplayWelcome
		

disp:
	call DisplayMenu
	cmp al,"i"
	je inst
	cmp al,"e"
	je ex
	cmp al,"h"
	je hscore
	cmp al,"p"
	je play
	jmp disp
inst:
	call DisplayInstruction
	cmp al,"b"
	je disp
	jmp inst
hscore:
	call DisplayHscore
	cmp al,"b"
	je disp
	jmp hscore
; gameplay ;

play:
	; lvl 1 ;
	mov lives,3
	mov level,1
	call level1
	cmp changelvl,1
	jne exitGame

	;lvl2 ;
	mov lives,3
	mov level,2
	call level2
	cmp changelvl,1
	jne exitGame

	;lvl3;
	mov lives,3
	mov level,3
	call level3
	cmp changelvl,1
	jne exitGame
	call DisplayGameWon
	jmp finish


exitGame:
	call EndGame

finish:

	call writeScores
	
	ex:
	
	exit
main ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;player functions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DrawPlayer PROC uses eax edx
cmp powerup,1
jne norm
mov eax,red+(yellow*16)
jmp cont
norm:
	mov eax,yellow+(black*16)
cont:
	call SetTextColor
	mov dl,xPos
	mov dh,yPos
	call Gotoxy
	mov al,">"
	call WriteChar
	ret
DrawPlayer ENDP

UpdatePlayer PROC uses eax edx
	mov dl,xPos
	mov dh,yPos
	call Gotoxy

	movzx eax,yPos
	movzx ebx,xPos

	dec eax
	mov esi, theMap
	push ebx
	mov ebx, LENGTHOF theMap1
	mul ebx
	pop ebx
	add eax, ebx
	add esi, eax
	mov al, [esi]
    
	cmp al, "0"
	jne power
	mov eax, lightgray
	call settextcolor
	mov al,"0"
	call WriteChar
	jmp en
power:
	cmp al, "?"
	jne tele
	INVOKE PlaySound, OFFSET PPSound, NULL, 0
	mov byte ptr [esi], ' '
	mov powerup , 1
	mov clock, 0

tele:
	cmp al, "&"
	jne spa
	mov eax, lightgray
	call settextcolor
	mov al,"&"
	call WriteChar
	jmp en

spa:
	mov al," "
	call WriteChar

en:
	ret
UpdatePlayer ENDP


UpdateScore PROC uses edx eax 
    movzx eax,yPos
	movzx ebx,xPos

	dec eax
	mov esi, theMap
	push ebx
	mov ebx, LENGTHOF theMap1
	
	mul ebx
	pop ebx
	add eax, ebx
	add esi, eax
	mov al, [esi]
    
	cmp al, "."
	jne c2
	INVOKE PlaySound, OFFSET DotSound, NULL, 11h
	mov byte ptr [esi], ' '
	inc score
	dec lvlpts
	jmp upsc

c2:
	cmp al, "*"
	jne life
	mov byte ptr [esi], ' '
	add score,2
	jmp upsc

life:
	cmp al, "~"
	jne upsc
	mov byte ptr [esi], ' '
	inc lives
comment /
power:
	cmp al, "?"
	jne nochange
	mov byte ptr [esi], ' '
	mov powerup , 1
	mov clock, 0
/
upsc:
	mov dl, 102
    mov dh, 16
    call Gotoxy
	mov eax, lightCyan
	call SetTextColor
	mov eax,0
    mov eax, score
    call WriteInt

nochange:
ret
UpdateScore ENDP


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ghost functions;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DrawGhost1 PROC uses eax edx
	mov eax,red
	call SetTextColor
	mov dl,xg1Pos
	mov dh,yg1Pos
	call Gotoxy
	mov al,"X"
	call WriteChar
	ret
DrawGhost1 ENDP


UpdateGhost PROC uses eax edx ebx esi
	mov eax,white
	call SetTextColor

	push ebp
	mov ebp,esp

	mov eax,[ebp+24]
	mov ebx,[ebp+28]

	mov dl,bl
	mov dh,al
	call Gotoxy

	mov ecx,0								; check if ghost is moving on player's collectables, redraw in that case ;
	dec eax
	mov esi, theMap
	push ebx
	mov ebx, LENGTHOF theMap1
	mul ebx
	pop ebx

	add eax, ebx
	add esi, eax
	mov al, [esi]

    cmp al, "."
	jne dot
	mov al,"."
	call WriteChar
	jmp en

dot:
	cmp al,"*"
	jne hid
	push eax			  
	mov eax, yellow
	call SetTextColor
	mov eax,"*"
	call writechar
	pop eax
	jmp en
	
hid:
	cmp al,"0"
	jne pp
	mov eax, lightgray
	call settextcolor
	mov al,"0"
	call WriteChar
	jmp en

pp:
	cmp al,"?"
	jne lif
	mov eax, lightgreen
	call settextcolor
	mov al,"?"
	call WriteChar
	jmp en

lif:
	cmp al,"~"
	jne spac
	mov eax, lightred
	call settextcolor
	mov al,"~"
	call WriteChar
	jmp en

spac:
	mov al," "
	call WriteChar

en:	
	pop ebp
ret
UpdateGhost ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; movement of ghost ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MoveGhost1 PROC uses eax

	mov eax,16					; generate random number to control ghost movement
       call RandomRange 
       inc  eax 


	cmp eax,4					; move acc to random numb generated
	jne c2						; but check collisions with walls aswell 

	movzx eax,yg1Pos
	push eax
	movzx eax,xg1Pos
	push eax
	call CheckCollisionWallsup
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g1move,"w"
	jmp en


c2:
	cmp eax,8
	jne c3

	movzx eax,yg1Pos
	push eax
	movzx eax,xg1Pos
	push eax
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g1move,"a"
	jmp en


c3:
	cmp eax,12
	jne c4

	movzx eax,yg1Pos
	push eax
	movzx eax,xg1Pos
	push eax
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g1move,"s"
	jmp en


c4:
	cmp eax,16
	jne en

	movzx eax,yg1Pos
	push eax
	movzx eax,xg1Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g1move,"d"
	jmp en


en:
	cmp g1move,"w"
	jne d
	movzx eax,yg1Pos
	push eax
	movzx eax,xg1Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsup
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveUp
		
d:
	cmp g1move,"s"
	jne l
	movzx eax,yg1Pos
	push eax
	movzx eax,xg1Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveDown

l:
	cmp g1move,"a"
	jne r
	movzx eax,yg1Pos
	push eax
	movzx eax,xg1Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveLeft

r:
	cmp g1move,"d"
	jne nochange
	movzx eax,yg1Pos
	push eax
	movzx eax,xg1Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveRight

	

						;;;; actual movement after all the checks and jumps ;;;;
moveUp:
	movzx eax, xg1Pos
	push eax
	movzx eax, yg1Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	dec yg1Pos
	call DrawGhost1
	jmp nochange
moveDown:
	movzx eax, xg1Pos
	push eax
	movzx eax, yg1Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	inc yg1Pos
	call DrawGhost1
	jmp nochange
moveLeft:
	movzx eax, xg1Pos
	push eax
	movzx eax, yg1Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	dec xg1Pos
	call DrawGhost1
	jmp nochange
moveRight:
	movzx eax, xg1Pos
	push eax
	movzx eax, yg1Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	inc xg1Pos
	call DrawGhost1
	jmp nochange


nochange:
ret
MoveGhost1 ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; The remaining ghosts will follow exactly same logic ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DrawGhost2 PROC uses eax edx
	mov eax,magenta
	call SetTextColor
	mov dl,xg2Pos
	mov dh,yg2Pos
	call Gotoxy
	mov al,"X"
	call WriteChar
	
	ret
DrawGhost2 ENDP



MoveGhost2 PROC uses eax

	mov eax,16					; generate random number to control ghost movement
       call RandomRange 
       inc  eax 


	cmp eax,4					; move acc to random numb generated
	jne c2						; but check collisions with walls aswell 

	movzx eax,yg2Pos
	push eax
	movzx eax,xg2Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsup
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g2move,"w"
	jmp en


c2:
	cmp eax,8
	jne c3

	movzx eax,yg2Pos
	push eax
	movzx eax,xg2Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g2move,"a"
	jmp en


c3:
	cmp eax,12
	jne c4

	movzx eax,yg2Pos
	push eax
	movzx eax,xg2Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g2move,"s"
	jmp en


c4:
	cmp eax,16
	jne en

	movzx eax,yg2Pos
	push eax
	movzx eax,xg2Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g2move,"d"
	jmp en


en:
	cmp g2move,"w"
	jne d
	movzx eax,yg2Pos
	push eax
	movzx eax,xg2Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsup
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveUp
		
d:
	cmp g2move,"s"
	jne l
	movzx eax,yg2Pos
	push eax
	movzx eax,xg2Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveDown

l:
	cmp g2move,"a"
	jne r
	movzx eax,yg2Pos
	push eax
	movzx eax,xg2Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveLeft

r:
	cmp g2move,"d"
	jne nochange
	movzx eax,yg2Pos
	push eax
	movzx eax,xg2Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveRight

	

						;;;; actual movement after all the checks and jumps ;;;;
moveUp:
	movzx eax, xg2Pos
	push eax
	movzx eax, yg2Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	dec yg2Pos
	call DrawGhost2
	jmp nochange
moveDown:
	movzx eax, xg2Pos
	push eax
	movzx eax, yg2Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	inc yg2Pos
	call DrawGhost2
	jmp nochange
moveLeft:
	movzx eax, xg2Pos
	push eax
	movzx eax, yg2Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	dec xg2Pos
	call DrawGhost2
	jmp nochange
moveRight:
	movzx eax, xg2Pos
	push eax
	movzx eax, yg2Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	inc xg2Pos
	call DrawGhost2
	jmp nochange


nochange:
ret
MoveGhost2 ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DrawGhost3 PROC uses eax edx
	mov eax,brown;+(yellow*16)
	call SetTextColor
	mov dl,xg3Pos
	mov dh,yg3Pos
	call Gotoxy
	mov al,"X"
	call WriteChar
	ret
DrawGhost3 ENDP



MoveGhost3 PROC uses eax

	mov eax,8					; generate random number to control ghost movement
       call RandomRange 
       inc  eax 


	cmp eax,2					; move acc to random numb generated
	jne c2						; but check collisions with walls aswell 

	movzx eax,yg3Pos
	push eax
	movzx eax,xg3Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsup
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g3move,"w"
	jmp en


c2:
	cmp eax,4
	jne c3

	movzx eax,yg3Pos
	push eax
	movzx eax,xg3Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g3move,"a"
	jmp en


c3:
	cmp eax,6
	jne c4

	movzx eax,yg3Pos
	push eax
	movzx eax,xg3Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g3move,"s"
	jmp en


c4:
	cmp eax,8
	jne en

	movzx eax,yg3Pos
	push eax
	movzx eax,xg3Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g3move,"d"
	jmp en


en:
	cmp g3move,"w"
	jne d
	movzx eax,yg3Pos
	push eax
	movzx eax,xg3Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsup
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveUp
		
d:
	cmp g3move,"s"
	jne l
	movzx eax,yg3Pos
	push eax
	movzx eax,xg3Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveDown

l:
	cmp g3move,"a"
	jne r
	movzx eax,yg3Pos
	push eax
	movzx eax,xg3Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveLeft

r:
	cmp g3move,"d"
	jne nochange
	movzx eax,yg3Pos
	push eax
	movzx eax,xg3Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveRight

	

						;;;; actual movement after all the checks and jumps ;;;;
moveUp:
	movzx eax, xg3Pos
	push eax
	movzx eax, yg3Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	dec yg3Pos
	call DrawGhost3
	jmp nochange
moveDown:
	movzx eax, xg3Pos
	push eax
	movzx eax, yg3Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	inc yg3Pos
	call DrawGhost3
	jmp nochange
moveLeft:
	movzx eax, xg3Pos
	push eax
	movzx eax, yg3Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	dec xg3Pos
	call DrawGhost3
	jmp nochange
moveRight:
	movzx eax, xg3Pos
	push eax
	movzx eax, yg3Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	inc xg3Pos
	call DrawGhost3
	jmp nochange


nochange:
ret
MoveGhost3 ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DrawGhost4 PROC uses eax edx
	mov eax,green;+(yellow*16)
	call SetTextColor
	mov dl,xg4Pos
	mov dh,yg4Pos
	call Gotoxy
	mov al,"X"
	call WriteChar
	;mov eax,white+(black*16)
	;call SetTextColor
	ret
DrawGhost4 ENDP



MoveGhost4 PROC uses eax

	mov eax,8					; generate random number to control ghost movement
       call RandomRange 
       inc  eax 


	cmp eax,1					; move acc to random numb generated
	jne c2						; but check collisions with walls aswell 

	movzx eax,yg4Pos
	push eax
	movzx eax,xg4Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsup
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g4move,"w"
	jmp en


c2:
	cmp eax,3
	jne c3

	movzx eax,yg4Pos
	push eax
	movzx eax,xg4Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g4move,"a"
	jmp en


c3:
	cmp eax,5
	jne c4

	movzx eax,yg4Pos
	push eax
	movzx eax,xg4Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g4move,"s"
	jmp en


c4:
	cmp eax,7
	jne en

	movzx eax,yg4Pos
	push eax
	movzx eax,xg4Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g4move,"d"
	jmp en


en:
	cmp g4move,"w"
	jne d
	movzx eax,yg4Pos
	push eax
	movzx eax,xg4Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsup
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveUp
		
d:
	cmp g4move,"s"
	jne l
	movzx eax,yg4Pos
	push eax
	movzx eax,xg4Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveDown

l:
	cmp g4move,"a"
	jne r
	movzx eax,yg4Pos
	push eax
	movzx eax,xg4Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveLeft

r:
	cmp g4move,"d"
	jne nochange
	movzx eax,yg4Pos
	push eax
	movzx eax,xg4Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveRight

	

						;;;; actual movement after all the checks and jumps ;;;;
moveUp:
	movzx eax, xg4Pos
	push eax
	movzx eax, yg4Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	dec yg4Pos
	call DrawGhost4
	jmp nochange
moveDown:
	movzx eax, xg4Pos
	push eax
	movzx eax, yg4Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	inc yg4Pos
	call DrawGhost4
	jmp nochange
moveLeft:
	movzx eax, xg4Pos
	push eax
	movzx eax, yg4Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	dec xg4Pos
	call DrawGhost4
	jmp nochange
moveRight:
	movzx eax, xg4Pos
	push eax
	movzx eax, yg4Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	inc xg4Pos
	call DrawGhost4
	jmp nochange


nochange:
ret
MoveGhost4 ENDP

DrawGhost5 PROC uses eax edx
	mov eax,lightmagenta
	call SetTextColor
	mov dl,xg5Pos
	mov dh,yg5Pos
	call Gotoxy
	mov al,"X"
	call WriteChar
	ret
DrawGhost5 ENDP



MoveGhost5 PROC uses eax

	mov eax,4					; generate random number to control ghost movement
       call RandomRange 
       inc  eax 


	cmp eax,1					; move acc to random numb generated
	jne c2						; but check collisions with walls aswell 

	movzx eax,yg5Pos
	push eax
	movzx eax,xg5Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsup
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g5move,"w"
	jmp en


c2:
	cmp eax,2
	jne c3

	movzx eax,yg5Pos
	push eax
	movzx eax,xg5Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g5move,"a"
	jmp en


c3:
	cmp eax,3
	jne c4

	movzx eax,yg5Pos
	push eax
	movzx eax,xg5Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g5move,"s"
	jmp en


c4:
	cmp eax,4
	jne en

	movzx eax,yg5Pos
	push eax
	movzx eax,xg5Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je en
	mov g5move,"d"
	jmp en


en:
	cmp g5move,"w"
	jne d
	movzx eax,yg5Pos
	push eax
	movzx eax,xg5Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsup
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveUp
		
d:
	cmp g5move,"s"
	jne l
	movzx eax,yg5Pos
	push eax
	movzx eax,xg5Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsdown
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveDown

l:
	cmp g5move,"a"
	jne r
	movzx eax,yg5Pos
	push eax
	movzx eax,xg5Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsleft
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveLeft

r:
	cmp g5move,"d"
	jne nochange
	movzx eax,yg5Pos
	push eax
	movzx eax,xg5Pos
	push eax
	mov esi, 0
	call CheckCollisionWallsright
	pop eax
	pop eax
	cmp ebx,1
	je nochange
	jmp moveRight

	

						;;;; actual movement after all the checks and jumps ;;;;
moveUp:
	movzx eax, xg5Pos
	push eax
	movzx eax, yg5Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	dec yg5Pos
	call DrawGhost5
	jmp nochange
moveDown:
	movzx eax, xg5Pos
	push eax
	movzx eax, yg5Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	inc yg5Pos
	call DrawGhost5
	jmp nochange
moveLeft:
	movzx eax, xg5Pos
	push eax
	movzx eax, yg5Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	dec xg5Pos
	call DrawGhost5
	jmp nochange
moveRight:
	movzx eax, xg5Pos
	push eax
	movzx eax, yg5Pos
	push eax
	call UpdateGhost
	pop eax
	pop eax
	inc xg5Pos
	call DrawGhost5
	jmp nochange


nochange:
ret
MoveGhost5 ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
























; displays game over screen;

EndGame PROC
call clrscr
mov ecx, mapSize
mov esi, Offset GameOverMessage
call drawmap
ret
EndGame ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;filehandling;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
readdatafile proc

; reading scores ;
    mov edx, offset fileName1
    call OpenInputFile
    mov filehandle, eax
    mov ecx, 2
read:
    mov ebx, ecx
      mov eax, filehandle
      mov  edx, OFFSET playerscore
      mov  ecx, lengthof playerscore
      call ReadFromFile
      mov eax, fileHandle
    mov ecx, ebx
loop read
mov eax, fileHandle
call closefile

; reading names ;
mov edx, offset fileName2
    call OpenInputFile
    mov filehandle, eax
    mov ecx, 2
read2:
    mov ebx, ecx
      mov eax, filehandle
      mov  edx, OFFSET playernames
      mov  ecx, lengthof playernames
      call ReadFromFile
      mov eax, fileHandle
    mov ecx, ebx
loop read2
mov eax, fileHandle
call closefile

; reading levels ;
mov edx, offset fileName3
    call OpenInputFile
    mov filehandle, eax
    mov ecx, 2
read3:
    mov ebx, ecx
      mov eax, filehandle
      mov  edx, OFFSET playerlevels
      mov  ecx, lengthof playerlevels
      call ReadFromFile
      mov eax, fileHandle
    mov ecx, ebx
loop read3
mov eax, fileHandle
call closefile

ret
readdatafile ENDP

writeScores PROC
; writing name ;
mov ebx,0
mov esi,offset username
mov ecx,lengthof username
lll:
	mov al, [esi]
	cmp al, 0
	je o
	inc ebx
	inc esi
	loop lll
o:
mov lenusername,ebx
mov esi,offset playernames
mov ecx, lengthof playernames
lp1:
mov al,[esi]
cmp al,"!"
jne cont

mov edx, offset username
mov ecx, ebx
    lp2:
        
        mov al,[edx]
        mov[esi],al
        inc esi
        inc edx
        inc numnames
        loop lp2
        mov al,","
        mov [esi],al
        inc numnames
        jmp further
cont:
inc esi
inc numnames
loop lp1


; writing score ;
further:

mov esi, offset arrScore + 4
mov ecx, 10
mov eax, score
mov byte ptr [esi], 0 
convertScore:
    dec esi
    mov edx, 0
    div ecx
    add dl, '0'
    mov byte ptr [esi], dl

    test eax, eax ;to check if quotient is non zero
    jnz convertScore

    

mov esi,offset playerscore
mov ecx, lengthof playerscore
lpp1:
mov al,[esi]
cmp al,"!"
jne cont2

        mov edx, offset arrScore
        mov ecx, lengthof arrScore

        fixScore:
        mov al, [edx]
        cmp al, 0
        jne l
        inc edx
        dec ecx
        jmp fixScore
       
l:
 lpp2:
        mov al,[edx]
        mov[esi],al
        inc esi
        inc edx 
        inc numscores
        loop lpp2
        mov al,","
        mov [esi],al
        inc numscores
        jmp further2
cont2:
inc esi
inc numscores
loop lpp1

; writing levels ;
further2:

movzx eax, level         ; Move the byte value into eax, zero-extending it to a dword
    add  eax, '0'            ; Convert the digit to ASCII by adding 48
    mov  [levelString], al   ; Store the result in the levelString buffer


mov esi,offset playerlevels
mov ecx, lengthof playerlevels
lp9:
mov al,[esi]
cmp al,"!"
jne contu

mov edx, offset levelString
       
    
        
        mov al,[edx]
        mov[esi],al
        mov al,","
        inc esi
        mov [esi],al
        inc numlevels
        inc numlevels
        jmp gh
contu:
inc esi
inc numlevels
loop lp9


gh:
; writing to files;
; names ;

mov edx, offset fileName2
call createOutputFile
mov fileHandle, eax
mov edx, offset playernames
movzx ecx, numnames
mov eax, fileHandle
call writeToFile
call closefile

; scores ;

mov edx, offset fileName1
call createOutputFile
mov fileHandle, eax
mov edx, offset playerscore
movzx ecx, numscores
mov eax, fileHandle
call writeToFile
call closefile

; levels ;

mov edx, offset fileName3
call createOutputFile
mov fileHandle, eax
mov edx, offset playerlevels
movzx ecx, numlevels
mov eax, fileHandle
call writeToFile
call closefile


ret
writeScores ENDP

printHighscores PROC
    
; printing ;
;names;
    mov dl,10
    mov dh,5
    call gotoxy
    mov eax,0
mov esi,offset playernames
mov ecx, 140
printloop:
    
    mov al, [esi]
    cmp al,"!"
    je en
    cmp al,","
    jne co
    call crlf
    mov dl,10
    inc dh
    call gotoxy
    jmp co2
    co:
    call writechar
    co2:
    inc esi
    loop printloop
    en:

    call displayscores
    
    ret
    printHighscores ENDP

displayscores PROC 

    ;scores;
    
mov esi,offset playerscore
mov ecx, 140
mov eax,0
    mov dl,30
    mov dh,5
    call gotoxy
printloop2:
    
    mov al, [esi]
    cmp al,"!"
    je en2
    cmp al,","
    jne c2o2
    call crlf
    mov dl,30
    inc dh
    call gotoxy
    jmp co22
    c2o2:
    call writechar
    co22:
    inc esi
    loop printloop2
en2:
call displaylvls
ret
displayscores ENDP

displaylvls PROC

;levels;
    mov dl,50
    mov dh,5
    call gotoxy
    mov eax,0
mov esi,offset playerlevels
mov ecx, 140
printloop3:
    
    mov al, [esi]
    cmp al,"!"
    je en9
    cmp al,","
    jne c5
    call crlf
    mov dl,50
    inc dh
    call gotoxy
    jmp c8
    c5:
    call writechar
    c8:
    inc esi
    loop printloop3
en9:

ret
displaylvls ENDP

END main